{"version":3,"sources":["pages/Home.jsx","pages/Project.jsx","pages/About.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["itemText","Navbar","props","toggleIsOpened","setState","isOpened","state","close","className","width","height","viewBox","xmlns","d","onClick","this","to","onCLick","React","Component","basename","process","exact","path","component","Home","About","Project","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTACc,oBACV,8CCDU,oBACV,iDCDU,oBACV,+C,gCCEEA,G,MAAW,0EACIC,E,kDACpB,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAIPC,eAAiB,WAChB,EAAKC,SAAS,CAAEC,UAAW,EAAKC,MAAMD,YANpB,EASnBE,MAAQ,WACP,EAAKH,SAAS,CAAEC,UAAU,KAR1B,EAAKC,MAAQ,CAAED,UAAU,GAFP,E,qDAclB,OACC,yBAAKG,UAAU,+DACd,yBAAKA,UAAU,mDACd,yBAAKA,UAAU,4BAA4BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,8BAA6B,0BAAMC,EAAE,yVACjI,0BAAML,UAAU,wCAAhB,gBAED,yBAAKA,UAAU,gBACd,4BAAQA,UAAU,yHACjBM,QAASC,KAAKZ,gBACd,yBAAKK,UAAU,uBAAuBG,QAAQ,YAAYC,MAAM,8BAA6B,uCAAmB,0BAAMC,EAAE,mDAG1H,yBAAKL,UAAS,mEAA8DO,KAAKT,MAAMD,SAAW,mBAAqB,sBAEtH,yBAAKG,UAAU,wBACd,kBAAC,IAAD,CAAMQ,GAAG,IAAIR,UAAS,UAAKR,EAAL,YAAiBe,KAAKT,MAAMD,SAAU,YAAY,cAAiBS,QAASC,KAAKR,OAAvG,QACA,kBAAC,IAAD,CAAMS,GAAG,SAASR,UAAS,UAAKR,EAAL,YAAiBe,KAAKT,MAAMD,SAAU,YAAY,cAAiBS,QAASC,KAAKR,OAA5G,SACA,kBAAC,IAAD,CAAMS,GAAG,WAAWR,UAAS,UAAKR,EAAL,YAAiBe,KAAKT,MAAMD,SAAU,YAAY,cAAiBY,QAASF,KAAKR,OAA9G,kB,GAhC8BW,IAAMC,WCG3B,oBACd,6BACC,kBAAC,IAAD,CAAeC,SAAUC,IACxB,kBAAC,IAAD,KACC,6BACC,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWE,IAChC,kBAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWG,SCJnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c65974a4.chunk.js","sourcesContent":["import React from 'react'\nexport default() => (\n    <div>\n        this is home \n    </div>\n)","import React from 'react'\nexport default() => (\n    <div>\n        this is project\n    </div>\n)","import React from 'react'\nexport default() => (\n    <div>\n        this is about\n    </div>\n)","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport posed from 'react-pose'\n\nconst itemText = \"block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\"\nexport default class Navbar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = { isOpened: false }\n\t}\n\n\ttoggleIsOpened = () => {\n\t\tthis.setState({ isOpened: !this.state.isOpened })\n\t}\n\n\tclose = () => {\n\t\tthis.setState({ isOpened: false})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"flex items-center justify-between flex-wrap bg-teal-500 p-6\">\n\t\t\t\t<div className=\"flex items-center flex-shrink-0 text-white mr-6\">\n\t\t\t\t\t<svg className=\"fill-current h-8 w-8 mr-2\" width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.5 22.1c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05zM0 38.3c1.8-7.2 6.3-10.8 13.5-10.8 10.8 0 12.15 8.1 17.55 9.45 3.6.9 6.75-.45 9.45-4.05-1.8 7.2-6.3 10.8-13.5 10.8-10.8 0-12.15-8.1-17.55-9.45-3.6-.9-6.75.45-9.45 4.05z\" /></svg>\n\t\t\t\t\t<span className=\"font-semibold text-xl tracking-tight\">sho0126hiro</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"block lg:h-0\">\n\t\t\t\t\t<button className=\"lg:hidden flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\"\n\t\t\t\t\t\tonClick={this.toggleIsOpened}>\n\t\t\t\t\t\t<svg className=\"fill-current h-3 w-3\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><title>Menu</title><path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" /></svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div className={`w-full block flex-grow lg:flex lg:items-center lg:w-auto ${this.state.isOpened ? \"open ease-in-out\" : \"close ease-in-out\"}`}>\n\n\t\t\t\t\t<div className=\"text-sm lg:flex-grow\">\n\t\t\t\t\t\t<Link to=\"/\" className={`${itemText} ${this.state.isOpened? \"open-text\":\"close-text\" }`} onClick={this.close}>Home</Link>\n\t\t\t\t\t\t<Link to=\"/about\" className={`${itemText} ${this.state.isOpened? \"open-text\":\"close-text\" }`} onClick={this.close}>About</Link>\n\t\t\t\t\t\t<Link to=\"/project\" className={`${itemText} ${this.state.isOpened? \"open-text\":\"close-text\" }`} onCLick={this.close}>Project</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}","import React from 'react'\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Home from './pages/Home'\nimport Project from './pages/Project'\nimport About from './pages/About'\nimport Navbar from './components/Navbar'\n\nexport default () => (\n\t<div>\n\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t\t<Switch>\n\t\t\t\t<div>\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t\t<Route path='/project' component={Project} />\n\t\t\t\t</div>\n\t\t\t</Switch>\n\t\t</BrowserRouter>\n\t</div>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}